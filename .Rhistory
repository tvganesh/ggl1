dat = WDI(indicator='NY.GNP.PCAP.CD', country="all",start=1970, end=2016)
l = dim(dat)
data1 <- dat[2163:l[1],]
gg=gvisMotionChart(data, idvar='country', timevar='year',options=list())
pop = WDI(indicator='SP.POP.TOTL', country="all",start=1970, end=2016)
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1970, end=2016)
le= WDI(indicator='SP.DYN.LE00.IN', country="all",start=1970, end=2016)
dim(pop)
dim(gdp)
dim(le)
names(pop)[3]="Population"
names(le)[3]="Life Expectancy"
names(gdp)[3]="GDP"
gdp_life_exp <- join(gdp, le)
development <- join(gdp_life_exp,pop)
#2163
# Remove aggregate nations
ff <- cc$region != "Aggregates"
ccc <- cc[ff,]
a =WDI_data
b=a[[1]]
c=a[[2]]
cc = as.data.frame(c)
ff <- cc$region != "Aggregates"
ccc <- cc[ff,]
dd = subset(development, country %in% ccc$country)
ee = join(dd,ccc)
dim(ee)
gg<- gvisMotionChart(ee,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
getwd()
dir()
cat(gg$html$chart, file="temp.html")
getwd()
dir()
getwd()
library(WDI)
library(ggplot2)
library(googleVis)
library(dplyr)
library("plyr")
pop = WDI(indicator='SP.POP.TOTL', country="all",start=1970, end=2016)
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1970, end=2016)
le= WDI(indicator='SP.DYN.LE00.IN', country="all",start=1970, end=2016)
names(pop)[3]="Population"
names(le)[3]="Life Expectancy"
names(gdp)[3]="GDP"
gdp_life_exp <- join(gdp, le)
development <- join(gdp_life_exp,pop)
a =WDI_data
b=a[[1]]
c=a[[2]]
cc = as.data.frame(c)
ff <- cc$region != "Aggregates"
ccc <- cc[ff,]
dd = subset(development, country %in% ccc$country)
ee = join(dd,ccc)
gg<- gvisMotionChart(ee,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
gg<- gvisMotionChart(ee,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
plot(gg)
library(WDI)
library(ggplot2)
library(googleVis)
library(dplyr)
pop = WDI(indicator='SP.POP.TOTL', country="all",start=1970, end=2016)
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1970, end=2016)
le= WDI(indicator='SP.DYN.LE00.IN', country="all",start=1970, end=2016)
names(pop)[3]="Population"
names(le)[3]="Life Expectancy"
names(gdp)[3]="GDP"
gdp_life_exp <- join(gdp, le)
development <- join(gdp_life_exp,pop)
wdi_data =WDI_data
wdi_data[[1]]
b=wdi_data[[1]]
View(b)
wdi_data =WDI_data
# The 1st matrix is the list is the set of all World Bank Indicators
indicators=wdi_data[[1]]
# The 2nd  matrix gives the set of countries and regions
countries=wdi_data[[2]]
df = as.data.frame(countries)
head(df)
aa <- countries_df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
aa <- df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
dim(countries_df)
bb = subset(development, country %in% ccc$country)
developmentDF = join(bb,countries_df)
dim(developmentDF)
cc = complete.cases(developmentDF)
dd = developmentDF[cc,]
dim(dd)
dd = complete.cases(developmentDF)
developmentDF = cc[dd,]
dd = complete.cases(cc)
developmentDF = cc[dd,]
countries_df <- df[aa,]
# Subset from the development data only those corresponding to the countries
bb = subset(development, country %in% ccc$country)
cc = join(bb,countries_df)
dim(cc)
dd = complete.cases(cc)
developmentDF = cc[dd,]
dim(developmentDF)
gg<- gvisMotionChart(developmentDF,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
income = WDI(indicator='NY.GDP.PCAP.PP.CD', country="all",start=1970, end=2016)
population = WDI(indicator='SP.POP.TOTL', country="all",start=1960, end=2016)
# GDP
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1960, end=2016)
#Life expectancy
lifeExpectancy= WDI(indicator='SP.DYN.LE00.IN', country="all",start=1960, end=2016)
# Per capita
income = WDI(indicator='NY.GDP.PCAP.PP.CD', country="all",start=1960, end=2016)
#Fertility
fertility = WDI(indicator='SP.DYN.TFRT.IN', country="all",start=1960, end=2016)
names(population)[3]="Population"
names(lifeExpectancy)[3]="Life Expectancy"
names(gdp)[3]="GDP"
names(income)[3]="Per capita income"
names(fertility)[3]="Fertility"
j1 <- join(population, gdp)
j2 <- join(j1,lifeExpectancy)
j3 <- join(j2,income)
j4 <- join(j3,fertility)
wdi_data =WDI_data
# The 1st matrix is the list is the set of all World Bank Indicators
indicators=wdi_data[[1]]
# The 2nd  matrix gives the set of countries and regions
countries=wdi_data[[2]]
df = as.data.frame(countries)
aa <- df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
bb = subset(wbData, country %in% ccc$country)
wbData <- join(j3,fertility)
bb = subset(wbData, country %in% ccc$country)
cc = join(bb,countries_df)
dd = complete.cases(cc)
developmentDF = cc[dd,]
dim(developmentDF)
dim(cc)
dim(wDT)
gg<- gvisMotionChart(developmentDF,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
poverty= WDI(indicator='SI.POV.2DAY', country="all",start=1960, end=2016)
names(poverty)[3]="Poverty headcount ratio"
j1 <- join(population, gdp)
j2 <- join(j1,lifeExpectancy)
j3 <- join(j2,income)
j4 <- join(j3,poverty)
wbData <- join(j4,fertility)
bb = subset(wbData, country %in% ccc$country)
cc = join(bb,countries_df)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
elecAccess= WDI(indicator='EG.ELC.ACCS.ZS', country="all",start=1960, end=2016)
# Electric power consumption
elecConsumption= WDI(indicator='EG.USE.ELEC.KH.PC', country="all",start=1960, end=2016)
#CO2 emissions
co2Emissions= WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1960, end=2016)
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
j4 <- join(j3,co2Emissions)
wbData <- join(j4,fertility)
ee = subset(wbData1, country %in% ccc$country)
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
wbData1 <- join(j3,co2Emissions)
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
names(population)[3]="Population"
names(gdp)[3]="GDP"
names(elecAccess)[3]="Access to Electricity"
names(elecConsumption)[3]="Electric power consumption per capita"
names(co2Emissions)[3]="CO2 emisions"
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
population = WDI(indicator='SP.POP.TOTL', country="all",start=1960, end=2016)
# GDP
gdp= WDI(indicator='NY.GDP.MKTP.CD', country="all",start=1960, end=2016)
# Access to electricity
elecAccess= WDI(indicator='EG.ELC.ACCS.ZS', country="all",start=1960, end=2016)
# Electric power consumption per capita
elecConsumption= WDI(indicator='EG.USE.ELEC.KH.PC', country="all",start=1960, end=2016)
#CO2 emissions
co2Emissions= WDI(indicator='EN.ATM.CO2E.KT', country="all",start=1960, end=2016)
names(population)[3]="Population"
names(gdp)[3]="GDP"
names(elecAccess)[3]="Access to Electricity"
names(elecConsumption)[3]="Electric power consumption per capita"
names(co2Emissions)[3]="CO2 emisions"
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
wbData1 <- join(j3,co2Emissions)
```
wdi_data =WDI_data
# The 1st matrix is the list is the set of all World Bank Indicators
indicators=wdi_data[[1]]
# The 2nd  matrix gives the set of countries and regions
countries=wdi_data[[2]]
df = as.data.frame(countries)
aa <- df$region != "Aggregates"
# Remove the aggregates
countries_df <- df[aa,]
# Subset from the development data only those corresponding to the countries
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
sanitationAccess= WDI(indicator='SH.STA.ACSN', country="all",start=1960, end=2016)
names(sanitationAccess)[3]="Access to sanitation(% popn)"
names(sanitationAccess)[3]="Access to sanitation(% popn)"
j1 <- join(population, gdp)
j2 <- join(j1,elecAccess)
j3 <- join(j2,elecConsumption)
j4 <- join(j3,co2Emissions)
wbData1 <- join(j3,sanitationAccess)
ee = subset(wbData1, country %in% ccc$country)
ff = join(ee,countries_df)
gg<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg)
library(WDI)
library(ggplot2)
library(googleVis)
library(plyr)
gg<- gvisMotionChart(cc,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Life Expectancy",
sizevar ="Population",
colorvar = "region")
plot(gg)
cat(gg$html$chart, file="chart1.html")
cat(gg$html$chart, file="chart1.html")
getwd()
gg1<- gvisMotionChart(ff,
idvar = "country",
timevar = "year",
xvar = "GDP",
yvar = "Access to Electricity",
sizevar ="Population",
colorvar = "region")
plot(gg1)
cat(gg1$html$chart, file="chart2.html")
shiny::runApp('C:/software/cricket-package/cricsheet/googly')
shiny::runApp('C:/software/cricket-package/cricsheet/googly')
runApp('C:/software/cricket-package/cricsheet/googly')
IPLTeamsAll <- gsub(".RData","",a2)
runApp('C:/software/cricket-package/cricsheet/googly')
shiny::runApp('C:/software/cricket-package/cricsheet/googly-copy')
runApp('C:/software/cricket-package/cricsheet/googly-copy')
runApp('C:/software/cricket-package/cricsheet/googly-copy')
runApp('C:/software/cricket-package/cricsheet/googly-copy')
runApp('C:/software/cricket-package/cricsheet/googly-copy')
runApp('C:/software/cricket-package/cricsheet/googly-copy')
load("./data/Deccan Chargers-BattingDetails.RData")
setwd("C:/software/cricket-package/cricsheet/googly-copy")
load("./data/Deccan Chargers-BattingDetails.RData")
whos
ls()
rm(list=ls())
ls()
load("./data/Deccan Chargers-BattingDetails.RData")
ls()
runApp()
batsmanRunsVsDeliveries(battingDetails,"AC Gilchrist")
a <-batsmanRunsVsDeliveries(battingDetails,"AC Gilchrist")
class(a)
runApp()
a <-batsmanRunsVsDeliveries(battingDetails,"AC Gilchrist")
dim(battingDetails)
runApp()
getBatsmanDetails("Deccan Chargers","AC Gilchrist","./data")
a <-getBatsmanDetails("Deccan Chargers","AC Gilchrist","./data")
a <-getBatsmanDetails("Deccan Chargers","AC Gilchrist","./data")
dim(a)
a <-getBatsmanDetails("Kings XI Punjab","AC Gilchrist","./data")
dim(a)
getTeamsBattingDetails("Deccan Chargers","./IPLmatches")
getTeamBattingDetails("Deccan Chargers","./IPLmatches")
a <-getTeamBattingDetails("Deccan Chargers","./IPLmatches")
a <-getTeamBattingDetails("Deccan Chargers","./IPLmatches",save=TRUE)
a <-getBatsmanDetails("Deccan Chargers","AC Gilchrist","./data")
dim(a)
a
class(a)
b<-class(a)
b
b[1]
b[1]== "tbl_df"
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
0.1*.15+.25*2+.35
0.05*.15+.1*.2+.35
source('C:/software/deepLearning/test.R')
b <- sigmoid(o1)
b
o1 <-0.05*.15+.1*.2+.35
b <- sigmoid(o1)
b
h1 <-0.05*.15+.1*.2+.35
out-h1 <- sigmoid(h1)
h1 <-0.05*.15+.1*.2+.35
outH1 <- sigmoid(h1)
outH1
h2 <- .05*.2 + .1*.3+.35
outH2 <- sigmoid(h2)
outH2
o1 <- outH1 * 0.40 + outH2*0.45 +.6
outO1 <- sigmoid(o1)
outO1
o2 <- outH1*0.45 + outH2*0.55 +0.6
outO2<- sigmoid(o2)
outO2
o1 <- outH1 * 0.40 + outH2*0.50 +.6
outO1 <- sigmoid(o1)
outO1
o1 <- outH1 * 0.40 + outH2*0.45 +.6
outO1 <- sigmoid(o1)
outO1
o2 <- outH1*0.5 + outH2*0.55 +0.6
outO2<- sigmoid(o2)
outO2
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
h1 <-0.05*.15+.1*.2+.35
outH1 <- sigmoid(h1)
outH1
h2 <- .05*.2 + .1*.3+.35
outH2 <- sigmoid(h2)
outH2
o1 <- outH1 * 0.40 + outH2*0.45 +.6
outO1 <- sigmoid(o1)
outO1
o2 <- outH1*0.5 + outH2*0.55 +0.6
outO2<- sigmoid(o2)
outO2
eOutO1 <- 1.2(.01 - outO1)^2
eOutO1 <- 1.2(.01 - outO1)**2
2^3
eOutO1 <- 1/2(.01 - outO1^2
)
eOutO1 <- 1/2(.01 - outO1)^2
eOutO1 <- ((.01 - outO1)^2)*1/2
errorOutO1 <- ((.01 - outO1)^2)*1/2
errorOutO1
errorOutO2 <- ((.99 - outO2)^2)*1/2
errorOutO2
eTotal = errorOutO1 + errorOutO2
eTotal
a1 <- out01 - .01
a1
a1 <- outO1 - .01
a1
a2 <- outO1 * (1 - outO1)
a2
a3 <- outO1 * .4
a3
a3 <- outH1 * .4
a3
a3 <- outH1
a3
x1 <- a1 * a2 * a3
x1
w51 <- 0.4 - 0.5 *x1
w51
outH1
x2 <- a1 * a2 * outH2
x2
w61 <- 0.45 - 0.5 *x2
w61
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
